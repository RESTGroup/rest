use std::fmt::Display;
use std::marker::PhantomData;
use std::ops::{Add, AddAssign, Sub, SubAssign};

use crate::sap;

mod tests {
    use num_complex::ComplexFloat;

    use crate::sap::mid_zeff;
    #[test]
    fn test_mid_zeff() {
        let z1 = 7.0;
        let point = (8.887230932654468675e-06,0.000000000000000000e+00,5.333310357589575723e-01);
        let r1 = (8.887230932654468675e-06*8.887230932654468675e-06 + (5.333310357589575723e-01-0.28222663) * (5.333310357589575723e-01-0.28222663)).sqrt();
        println!("{}", &r1);
        let zeff_n = 3.584303804738124104e-16 * mid_zeff(z1,r1, &crate::sap::ARR);
        //println!("{}", &zeff_n);
        
        let z2 = 1.0;
        let r2 =( (0.46901226-8.887230932654468675e-06)*(0.46901226-8.887230932654468675e-06) +0.81235307*0.81235307 +(5.333310357589575723e-01+0.09407554) * (5.333310357589575723e-01+0.09407554)).sqrt();
        let zeff_h1 = 3.584303804738124104e-16 * mid_zeff(z2,r2, &crate::sap::ARR);

        let z3 = 1.0;
        let r3 =( (0.46901226-8.887230932654468675e-06)*(0.46901226-8.887230932654468675e-06) +0.81235307*0.81235307 +(5.333310357589575723e-01+0.09407554) * (5.333310357589575723e-01+0.09407554)).sqrt();
        let zeff_h2 = 3.584303804738124104e-16 * mid_zeff(z3,r3, &crate::sap::ARR);

        let z4 = 1.0;
        let r4 =( (-0.93802452-8.887230932654468675e-06)*(-0.93802452-8.887230932654468675e-06)  +(5.333310357589575723e-01+0.09407554) * (5.333310357589575723e-01+0.09407554)).sqrt();
        let zeff_h3 = 3.584303804738124104e-16 * mid_zeff(z4,r4, &crate::sap::ARR);

        let zeff = zeff_n + zeff_h1 + zeff_h2 +zeff_h3;
        /*        "N,       0.00000000,      0.00000000,      0.28222663",
        "H,       0.46901226,      0.81235307,     -0.09407554",
        "H,       0.46901226,     -0.81235307,     -0.09407554",
        "H,      -0.93802452,      0.00000000,     -0.09407554"  */

        println!("{:?}", zeff)
    }
}